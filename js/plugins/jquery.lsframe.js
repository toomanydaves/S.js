/* *********************************************************************************************************************
PLUGIN lsframe
    @description: 
        lsframe is a container for displaying content. In addition to the main display that it employs for the content
    itself, when so configured, it can also include a header for accessing a collapsable panel and displaying a text 
    field showing a title or description.
    @methods:
        - init
            @params
                {
                    text (string),
                    panelHtml (string),
                    panelUrl (string),
                    panelState (string),
                    contentHtml (string),
                    contentUrl (string),
                    contentState (string)
                }
            @description
        - update
            @params { text: '', panel: '', content: '' }
        - remove
            @params
            @description
********************************************************************************************************************* */
(function ( $ ) {
    var $lsframe,
        methods,
        settings,
        defaults,
        filters,
        $description,
        $list,
        initFilters,
        initDescription,
        initList;
    
    defaults = {
        i18n_applyFilters: 'Apply filters',
        i18n_cancel: 'Cancel',
        i18n_modifyInput: 'Modify filters',
        i18n_viewFilters: 'This list was generated by applying the following filters:',
        i18n_editFilters: 'Modify, delete and add filters. Then apply them to the list.',
        filtersState: 'closed',
        listState: 'open',
        headerHeight: '34',
        actionsOffsetLeft: 140
    };

    initFilters = function ( ) {
        filters = {};
        /* -------------------------------------------------------------------------------------------------------------
        ELEMENTS
        ------------------------------------------------------------------------------------------------------------- */
        // Add elements for accessing filters.
        filters.$access = $(
            '<div class="lsframe-filters-access">' +
                '<div class="lsframe-filters-toggle">' +
                    '<img src="/js/jquery/plugins/jquery.lsframe.filters.png" />' +
                '</div>' +
            '</div>'
        ).appendTo($lsframe.$head);
        filters.$access.$promptToOpen = $(
            '<div class="lsframe-filters-prompt-to-open">' +
                '<img src="/js/jquery/plugins/jquery.lsframe.filters.promptToOpen.png" />' +
            '</div>'
        ).appendTo(filters.$access); 
        filters.$promptToClose = $(
            '<div class="lsframe-filters-prompt-to-close">' +
                '<img src="/js/jquery/plugins/jquery.lsframe.filters.promptToClose.png" />' +
            '</div>'
        ).appendTo(filters.$access);
        // Add elements for setting filters.
        filters.$settings = $('<div class="lsframe-filters-settings"></div>').appendTo($lsframe.$body);
        filters.$input = $(
            '<div class="lsframe-filters-input"></div>'
        ).appendTo(filters.$settings);
        filters.$output = $(
            '<div class="lsframe-filters-output">' +
                '<p class="lsframe-filters-view">' + settings.i18n_viewFilters + '</p>' +
                '<p class="lsframe-filters-edit">' + settings.i18n_editFilters + '</p>' +
                '<div class="lsframe-actions">' +
                    '<div class="button-wrapper"></div>' +
                '</div>' +
            '</div>'
        ).appendTo(filters.$settings);
        filters.$modifyInput = $(
            '<div class="lsframe-filters-edit-input button">' + 
                '<span>' + settings.i18n_modifyInput + '</span>' +
            '</div>' 
        ).appendTo($('.button-wrapper', filters.$output));
        filters.$applyFilters = $(
            '<div class="lsframe-filters-apply button">' +
                '<span>' + settings.i18n_applyFilters + '</span>' +
            '</div>'
        ).insertAfter(filters.$modifyInput);
        /* -------------------------------------------------------------------------------------------------------------
        METHODS
        ------------------------------------------------------------------------------------------------------------- */
        /* FILTER ACCESS */
        filters.promptToOpen = function ( ) {
            this.$access.animate({ height: '40px' }, 200);
        }; // end $filters.promptToOpen()
        filters.hidePromptToOpen = function ( ) {
            this.$access.animate({ height: '36px' }, 200);
        }; // end filters.hidePromptToOpen()
        /* -------------------------------------------------------------------------------------------------------------
        EVENTS
        ------------------------------------------------------------------------------------------------------------- */
        filters.state = settings.filtersState;
        /* FILTER ACCESS */
        filters.$access.hover(function ( ) {
            switch ( filters.state ) {
                case 'closed':
                    filters.promptToOpen();
            }
        }, function ( ) {
            switch ( filters.state ) {
                case 'closed':
                case 'closing':
                    filters.hidePromptToOpen();
                    break;
            }
        }).click(function ( ) {
            switch ( filters.state ) {
                case 'closed':
                    filters.state = 'opening';
                    $list.css('minWidth', $list.width() + 'px');
                    $list.animate({ marginLeft: '12px' }, 20, 'linear', function ( ) {
                        $list.animate({ marginLeft: '204px' }, 400);
                        filters.$settings.show().animate(
                            { width: '192', height: ($list.height() - 8) + 'px' }, 
                            400, 
                            'swing', 
                            function ( ) {
                                filters.$output.fadeIn(200);
                                filters.state = 'open';
                            }
                        );
                    });
                    break;
                case 'open':
                    filters.state = 'closing';
                    filters.hidePromptToOpen();
                    filters.$input.fadeOut(200);
                    filters.$output.fadeOut(200, function ( ) {
                        filters.$settings.animate({ width: '0', height: '0' }, 400, 'swing', function ( ) {
                            filters.$settings.hide();
                            filters.$output.css('left', '4px');
                        });
                        $list.animate({ marginLeft: '0px' }, 400, 'swing', function ( ) {
                            filters.state = 'closed';
                            filters.promptToOpen();
                        });
                    });
                    break;
            }
        }); 
        // FILTER SETTINGS
        filters.$modifyInput.click(function ( ) {
            filters.$output.fadeOut(200, function ( ) {
                filters.$modifyInput.hide();
                filters.$applyFilters.show();
                $('.lsframe-filters-view', filters.$output).hide();
                $('.lsframe-filters-edit', filters.$output).show(); 
                $list.animate({ marginLeft: '504px' }, 400);
                filters.$settings.animate({ width: '492px' }, 400);
                filters.$output.animate({ left: '300px' }, 400, 'swing', function ( ) {
                    filters.$output.fadeIn(200);
                    filters.$input.css({ width: '288px', height: '100%' }).fadeIn(200);
                });
            });
        }); 
    }; // end initFilters()
    initDescription = function ( ) {
        $description = $(
            '<div class="lsframe-description">' +
                settings.description +
            '</div>'
        ).insertAfter(filters.$access);
    }; // end initDescription()
    initList = function ( ) {
        var list = settings.list,
            $table,
            $fields,
            $records,
            $record,
            $actions,
            $action,
            $footer,
            i,
            j;
        /* -------------------------------------------------------------------------------------------------------------
        ELEMENTS
        ------------------------------------------------------------------------------------------------------------- */
        $list = $('<div class="lsframe-list"></div>').insertAfter(filters.$settings);
        // Create a table to store the list data.
        $table = $('<table><thead></thead></table>').appendTo($list);
        // Add fields as column headers.
        $fields = $('<tr></tr>').appendTo($('thead', $table));
        for ( i = 0; i < list.fields.length; i++ ) {
            if ( i === 0 ) {
                $fields.append($('<th class="sort-by">' + list.fields[i] + '</th>')); 
            } else {
                $fields.append($('<th>' + list.fields[i] + '</th>')); 
            }
        }    
        // Create the body of the table with records as rows.
        $records = $('<tbody class="striped"></tbody>').appendTo($table);
        for ( i = 0; i < list.records.length; i++ ) {
            $record = $('<tr></tr>').appendTo($records);
            for ( j = 0; j < list.records[i].length; j++ ) {
                if ( j === 0 ) {
                    $record.append('<td class="important">' + list.records[i][j] + '</td>');
                } else {
                    $record.append('<td>' + list.records[i][j] + '</td>');
                }
            }
        }
        // Create the footer with results and pagination.
        $footer = $('<tfoot><tr><td colspan="' + (list.fields.length + 1) + '"></td></tr></tfoot>')
            .appendTo($table)
            .find('td'); 
        $(
            '<div class="results">253 courses ' + 
                '(' +
                '<select name="records-per-page">' +
                    '<option value="10">10</option>' +
                    '<option selected="selected" value="15">15</option>' +
                    '<option value="25">25</option>' +
                    '<option value="50">50</option>' +
                    '<option value="100">100</option>' +
                    '<option value="200">200</option>' +
                '</select>' +
                ' courses per page)' +
            '</div>'
        ).appendTo($footer);
        $(
            '<div class="pagination">' +
                '<a class="previous">&#171; Prev</a>' +
                'Page ' +
                '<select name="page-number">' +
                    '<option selected="selected" value="1">1</option>' +
                    '<option value="2">2</option>' +
                    '<option value="3">3</option>' +
                    '<option value="4">4</option>' +
                    '<option value="5">5</option>' +
                    '<option value="6">6</option>' +
                    '<option value="7">7</option>' +
                    '<option value="8">8</option>' +
                    '<option value="9">9</option>' +
                    '<option value="10">10</option>' +
                    '<option value="11">11</option>' +
                    '<option value="12">12</option>' +
                    '<option value="13">13</option>' +
                    '<option value="14">14</option>' +
                    '<option value="15">15</option>' +
                    '<option value="16">16</option>' +
                    '<option value="17">17</option>' +
                '</select>' +
                ' of 17' +
                '<a class="next">Next &#187;</a>' +
            '</div>'
        ).appendTo($footer);
        /* -------------------------------------------------------------------------------------------------------------
        METHODS
        ------------------------------------------------------------------------------------------------------------- */
        /* -------------------------------------------------------------------------------------------------------------
        EVENTS
        ------------------------------------------------------------------------------------------------------------- */
        $records.find('tr').hover(
            function ( e ) {
                var $record = $(this),
                    recordOffset = $record.offset(),
                    actionsOffset = {},
                    $actions,
                    outerHeight,
                    height,
                    width;
                // TODO create actions from arguments to lslist
                // Add the markup for the action button
                $actions = $(
                    '<div class="context suggestion button">' +
                        '<img src="/images/button/calendar-white.png" class="leading-icon" />' +
                        '<span>Set a start date...</span>' +
                    '</div>'
                    ).appendTo('body');
                // Access the information for positioning
                outerHeight = $actions.outerHeight();
                height      = $actions.height();
                width       = $actions.width();
                $record.data('$actions', $actions.appendTo($record.find('td').last()).width(0));
                // Use information to make calculations.
                if ( $record.outerHeight() > outerHeight ) {
                    actionsOffset.top = (recordOffset.top + (($record.outerHeight() - outerHeight) / 2)); 
                } else {
                    actionsOffset.top = (recordOffset.top - ((outerHeight - $record.outerHeight()) / 2));
                }
                actionsOffset.left = e.pageX;
//                actionsOffset.left = recordOffset.left + $record.width();;
                // Apply the calucated position to the action button
                $actions.offset(actionsOffset).css('height', height).children().hide();
                $actions.animate(
                    { width: width, left: actionsOffset.left - settings.actionsOffsetLeft }, 
                    200, 
                    'swing', 
                    function ( ) { $actions.children().fadeIn(100) }
                );
            }, function ( ) {
                $(this).data('$actions').fadeOut(200);
            }
        );
        $lsframe.closest('.lsview-screen').bind('lsview-screen-loaded-and-in-position', function ( ) {
            //TODO activate the first row
        });
    }; // end initList()
  
    methods = {
        init: function ( config ) {
            settings = $.extend({}, defaults, config);
            $lsframe = this;
            $lsframe.addClass('lsframe');
            $lsframe.$head = $('<div class="lsframe-head"></div>').appendTo($lsframe);
            $lsframe.$body = $('<div class="lsframe-body"></div>').appendTo($lsframe);
            initFilters();
            initDescription();
            initList();
        },
        resize: function ( width, height ) {
            // code...
        },
        remove: function ( ) {
            // code...
        }
    };

    $.fn.lsframe = function ( args ) {
        if ( this.length !== 1 ) {
            return $.error('lsfilters may only be called on a jQuery object containing one HTML node');
        }
        // To init, call without any arguments, with the string init 
        // or with an array where the first item is the string init ...
        if ( !args || args === 'init' || (typeof args === 'object' && args[0] === 'init') ) {
            // ... on an element that hasn't already been initialized ...
            if ( this.hasClass('lsfilters') ) {
                return $.error('Object is already an lsview');
            }
            return methods.init.call(this, args[1] ? args[1] : null);
        }
        // To call a plugin method ...
        if ( !this.hasClass('lsfilters') ) {
            return $.error('Before calling a filters method the object must be initialized');
        }
        // ... either pass a string corresponding to a method name ...
        if ( typeof args === 'string' && typeof methods[args] === 'function' ) {
            return methods[args].call(this);
        } 
        // ... or an array where the first item is a string corresponding to a method name ...
        if ( typeof args === 'object' && typeof args[0] === 'string' && typeof methods[args[0]] === 'function' ) {
        	// ... and all other items are arguments for the method.
            return methods[args.shift()].apply(this, args);
        } else {
            return $.error('lsfilters can not respond');
        }
    };

})(jQuery);
